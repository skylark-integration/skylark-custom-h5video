{"version":3,"sources":["skylark-custom-h5video.js"],"names":["define","langx","styler","noder","eventer","$","plugins","CustomHtml5Video","Plugin","inherit","klassName","pluginName","options","selectors","video","videoControls","playButton","playbackIcons","timeElapsed","duration","progressBar","seek","seekTooltip","volumeButton","volumeIcons","volumeMute","volumeLow","volumeHigh","volume","playbackAnimation","fullscreenButton","fullscreenIcons","pipButton","_construct","elm","prototype","call","this","$el","_video","find","_videoControls","_playButton","_playbackIcons","_timeElapsed","_duration","_progressBar","_seek","_seekTooltip","_volumeButton","_volumeIcons","_volumeMute","_volumeLow","_volumeHigh","_volume","_playbackAnimation","_fullscreenButton","_fullscreenIcons","_pipButton","listenTo","togglePlay","updatePlayButton","initializeVideo","updateTimeElapsed","updateProgress","updateVolumeIcon","animatePlayback","showControls","hideControls","updateSeekTooltip","skipAhead","updateVolume","toggleMute","toggleFullScreen","updateFullscreenButton","togglePip","document","classList","add","keyboardShortcuts","videoWorks","createElement","canPlayType","controls","remove","load","source","media","_media","title","url","href","type","posterUrl","poster","altText","$play","_$play","$poster","_$poster","prop","src","alt","download","play","stop","pause","paused","ended","forEach","icon","toggle","setAttribute","formatTime","timeInSeconds","result","Date","toISOString","substr","minutes","seconds","videoDuration","Math","round","time","innerText","currentTime","value","floor","event","skipTo","offsetX","target","clientWidth","parseInt","getAttribute","t","textContent","rect","getBoundingClientRect","style","left","pageX","dataset","muted","animate","opacity","transform","fullscreenElement","exitFullscreen","webkitFullscreenElement","webkitExitFullscreen","_elm","webkitRequestFullscreen","requestFullscreen","pictureInPictureElement","disabled","requestPictureInPicture","exitPictureInPicture","error","console","addClass","removeClass","key","setTimeout","register","Player","main"],"mappings":"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","file":"../skylark-custom-h5video.js","sourcesContent":["define('skylark-custom-h5video/player',[\r\n  \"skylark-langx\",\r\n  \"skylark-domx-styler\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-plugins-base\"\r\n],function(langx,styler,noder, eventer,$ , plugins) {\r\n\r\n  'use strict'\r\n\r\n  var CustomHtml5Video = plugins.Plugin.inherit({\r\n    klassName : \"CustomHtml5Video\",\r\n\r\n    pluginName : \"intg.custom_html5_video\",\r\n   \r\n    options : {\r\n      selectors : {\r\n        video : 'video',\r\n        videoControls : '.video-controls',\r\n        playButton : '.play',\r\n        playbackIcons : '.playback-icons use',\r\n        timeElapsed : '.time-elapsed',\r\n        duration : '.duration',\r\n        progressBar : '.progress-bar',\r\n        seek : '.seek',\r\n        seekTooltip : '.seek-tooltip',\r\n        volumeButton : '.volume-button',\r\n        volumeIcons : '.volume-button use',\r\n        volumeMute : 'use[href=\"#volume-mute\"]',\r\n        volumeLow : 'use[href=\"#volume-low\"]',\r\n        volumeHigh : 'use[href=\"#volume-high\"]',\r\n        volume : '.volume',\r\n        playbackAnimation : '.playback-animation',\r\n        fullscreenButton : '.fullscreen-button',\r\n        fullscreenIcons : '.fullscreen-button use',\r\n        pipButton : '.pip-button'\r\n\r\n      }\r\n    },\r\n\r\n\r\n    _construct: function(elm, options) {\r\n      //this.options = options\r\n      plugins.Plugin.prototype._construct.call(this,elm,options);\r\n\r\n      let $el = this.$(),\r\n          selectors = this.options.selectors;\r\n\r\n      this._video = $el.find(selectors.video)[0];\r\n      this._videoControls = $el.find(selectors.videoControls)[0];\r\n      this._playButton = $el.find(selectors.playButton)[0];\r\n      this._playbackIcons = $el.find(selectors.playbackIcons)[0];\r\n      this._timeElapsed = $el.find(selectors.timeElapsed)[0];\r\n      this._duration = $el.find(selectors.duration)[0];\r\n      this._progressBar = $el.find(selectors.progressBar)[0];\r\n      this._seek = $el.find(selectors.seek)[0];\r\n      this._seekTooltip = $el.find(selectors.seekTooltip)[0];\r\n      this._volumeButton = $el.find(selectors.volumeButton)[0];\r\n      this._volumeIcons = $el.find(selectors.volumeIcons);\r\n      this._volumeMute = $el.find(selectors.volumeMute)[0];\r\n      this._volumeLow = $el.find(selectors.volumeLow)[0];\r\n      this._volumeHigh = $el.find(selectors.volumeHigh)[0];\r\n      this._volume = $el.find(selectors.volume)[0];\r\n      this._playbackAnimation = $el.find(selectors.playbackAnimation)[0];\r\n      this._fullscreenButton = $el.find(selectors.fullscreenButton)[0];\r\n      this._fullscreenIcons = $el.find(selectors.fullscreenIcons);\r\n      this._pipButton = $el.find(selectors.pipButton)[0];\r\n\r\n      // Add eventlisteners here\r\n      this.listenTo($(this._playButton),'click', this.togglePlay);\r\n      this.listenTo($(this._video),'play',this.updatePlayButton);\r\n      this.listenTo($(this._video),'pause',this.updatePlayButton);\r\n      this.listenTo($(this._video),'loadedmetadata',this.initializeVideo);\r\n      this.listenTo($(this._video),'timeupdate',this.updateTimeElapsed);\r\n      this.listenTo($(this._video),'timeupdate',this.updateProgress);\r\n      this.listenTo($(this._video),'volumechange',this.updateVolumeIcon);\r\n      this.listenTo($(this._video),'click',this.togglePlay);\r\n      this.listenTo($(this._video),'click',this.animatePlayback);\r\n      this.listenTo($(this._video),'mouseenter',this.showControls);\r\n      this.listenTo($(this._video),'mouseleave',this.hideControls);\r\n      this.listenTo($(this._videoControls),'mouseenter',this.showControls);\r\n      this.listenTo($(this._videoControls),'mouseleave',this.hideControls);\r\n      this.listenTo($(this._seek),'mousemove',this.updateSeekTooltip);\r\n      this.listenTo($(this._seek),'input',this.skipAhead);\r\n      this.listenTo($(this._volume),'input',this.updateVolume);\r\n      this.listenTo($(this._volumeButton),'click',this.toggleMute);\r\n      this.listenTo($(this._fullscreenButton),'click',this.toggleFullScreen);\r\n      this.listenTo($el,'fullscreenchange',this.updateFullscreenButton);\r\n      this.listenTo($(this._pipButton),'click',this.togglePip);\r\n\r\n      if (!('pictureInPictureEnabled' in document)) {\r\n          this._pipButton.classList.add('hidden');\r\n      }\r\n\r\n      this.listenTo($(document),'keyup',this.keyboardShortcuts);\r\n      \r\n      const videoWorks = !!document.createElement('video').canPlayType;\r\n      if (videoWorks) {\r\n        this._video.controls = false;\r\n        this._videoControls.classList.remove('hidden');\r\n      }\r\n\r\n      this.load();\r\n    },\r\n\r\n\r\n    source : function(media) {\r\n      this._media = media;\r\n      let title = media.title || \"\",\r\n          url = media.href,\r\n          type = media.type,\r\n          posterUrl = media.poster || \"\",\r\n          altText = media.altText || \"\";\r\n\r\n      let $el = this.$(),\r\n          video = this._video,\r\n          $play = this._$play,\r\n          $poster = this._$poster;\r\n\r\n      $el.prop(\"title\", title);\r\n      \r\n      if (video.canPlayType) {\r\n        if (url && type && video.canPlayType(type)) {\r\n          video.src = url\r\n        }    \r\n      }\r\n\r\n      video.poster = posterUrl\r\n      \r\n      $poster.prop({\r\n        \"src\" : posterUrl,\r\n        \"alt\" : altText\r\n      });\r\n\r\n      $play.prop({\r\n        'download' :  title,\r\n        \"href\" : url\r\n      });\r\n    \r\n    },\r\n\r\n    load : function() {\r\n      this._video.load();\r\n    },\r\n\r\n    play : function() {\r\n      this._video.play();\r\n\r\n    },\r\n\r\n    stop : function() {\r\n\r\n    },\r\n\r\n    pause : function() {\r\n      this._video.pause();      \r\n    },\r\n\r\n    // togglePlay toggles the playback state of the video.\r\n    // If the video playback is paused or ended, the video is played\r\n    // otherwise, the video is paused\r\n    togglePlay : function () {\r\n      if (this._video.paused || this._video.ended) {\r\n        this._video.play();\r\n      } else {\r\n        this._video.pause();\r\n      }\r\n    },\r\n\r\n    // updatePlayButton updates the playback icon and tooltip\r\n    // depending on the playback state\r\n    updatePlayButton : function () {\r\n      this._playbackIcons.forEach((icon) => icon.classList.toggle('hidden'));\r\n\r\n      if (video.paused) {\r\n        this._playButton.setAttribute('data-title', 'Play (k)');\r\n      } else {\r\n        this._playButton.setAttribute('data-title', 'Pause (k)');\r\n      }\r\n    },\r\n\r\n    // formatTime takes a time length in seconds and returns the time in\r\n    // minutes and seconds\r\n    formatTime : function (timeInSeconds) {\r\n      const result = new Date(timeInSeconds * 1000).toISOString().substr(11, 8);\r\n\r\n      return {\r\n        minutes: result.substr(3, 2),\r\n        seconds: result.substr(6, 2),\r\n      };\r\n    },\r\n\r\n    // initializeVideo sets the video duration, and maximum value of the\r\n    // progressBar\r\n    initializeVideo : function () {\r\n      const videoDuration = Math.round(this._video.duration);\r\n      this._seek.setAttribute('max', videoDuration);\r\n      this._progressBar.setAttribute('max', videoDuration);\r\n      const time = this.formatTime(videoDuration);\r\n      this._duration.innerText = `${time.minutes}:${time.seconds}`;\r\n      this._duration.setAttribute('datetime', `${time.minutes}m ${time.seconds}s`);\r\n    },\r\n\r\n    // updateTimeElapsed indicates how far through the video\r\n    // the current playback is by updating the timeElapsed element\r\n    updateTimeElapsed : function () {\r\n      const time = this.formatTime(Math.round(this._video.currentTime));\r\n      this._timeElapsed.innerText = `${time.minutes}:${time.seconds}`;\r\n      this._timeElapsed.setAttribute('datetime', `${time.minutes}m ${time.seconds}s`);\r\n    },\r\n\r\n    // updateProgress indicates how far through the video\r\n    // the current playback is by updating the progress bar\r\n    updateProgress : function () {\r\n      this._seek.value = Math.floor(this._video.currentTime);\r\n      this._progressBar.value = Math.floor(this._video.currentTime);\r\n    },\r\n\r\n    // updateSeekTooltip uses the position of the mouse on the progress bar to\r\n    // roughly work out what point in the video the user will skip to if\r\n    // the progress bar is clicked at that point\r\n    updateSeekTooltip : function (event) {\r\n      const skipTo = Math.round(\r\n        (event.offsetX / event.target.clientWidth) *\r\n          parseInt(event.target.getAttribute('max'), 10)\r\n      );\r\n      this._seek.setAttribute('data-seek', skipTo);\r\n      const t = this.formatTime(skipTo);\r\n      this._seekTooltip.textContent = `${t.minutes}:${t.seconds}`;\r\n      const rect = this._video.getBoundingClientRect();\r\n      this._seekTooltip.style.left = `${event.pageX - rect.left}px`;\r\n    },\r\n\r\n    // skipAhead jumps to a different point in the video when the progress bar\r\n    // is clicked\r\n    skipAhead : function (event) {\r\n      const skipTo = event.target.dataset.seek\r\n        ? event.target.dataset.seek\r\n        : event.target.value;\r\n      this._video.currentTime = skipTo;\r\n      this._progressBar.value = skipTo;\r\n      this._seek.value = skipTo;\r\n    },\r\n\r\n    // updateVolume updates the video's volume\r\n    // and disables the muted state if active\r\n    updateVolume : function () {\r\n      if (this._video.muted) {\r\n        this._video.muted = false;\r\n      }\r\n\r\n      this._video.volume = this._volume.value;\r\n    },\r\n\r\n    // updateVolumeIcon updates the volume icon so that it correctly reflects\r\n    // the volume of the video\r\n    updateVolumeIcon : function () {\r\n      this._volumeIcons.forEach((icon) => {\r\n        icon.classList.add('hidden');\r\n      });\r\n\r\n      this._volumeButton.setAttribute('data-title', 'Mute (m)');\r\n\r\n      if (this._video.muted || this._video.volume === 0) {\r\n        this._volumeMute.classList.remove('hidden');\r\n        this._volumeButton.setAttribute('data-title', 'Unmute (m)');\r\n      } else if (this._video.volume > 0 && this._video.volume <= 0.5) {\r\n        this._volumeLow.classList.remove('hidden');\r\n      } else {\r\n        this._volumeHigh.classList.remove('hidden');\r\n      }\r\n    },\r\n\r\n    // toggleMute mutes or unmutes the video when executed\r\n    // When the video is unmuted, the volume is returned to the value\r\n    // it was set to before the video was muted\r\n    toggleMute : function () {\r\n      this._video.muted = !video.muted;\r\n\r\n      if (this._video.muted) {\r\n        this._volume.setAttribute('data-volume', this._volume.value);\r\n        this._volume.value = 0;\r\n      } else {\r\n        this._volume.value = this._volume.dataset.volume;\r\n      }\r\n    },\r\n\r\n    // animatePlayback displays an animation when\r\n    // the video is played or paused\r\n    animatePlayback : function () {\r\n      this._playbackAnimation.animate(\r\n        [\r\n          {\r\n            opacity: 1,\r\n            transform: 'scale(1)',\r\n          },\r\n          {\r\n            opacity: 0,\r\n            transform: 'scale(1.3)',\r\n          },\r\n        ],\r\n        {\r\n          duration: 500,\r\n        }\r\n      );\r\n    },\r\n\r\n    // toggleFullScreen toggles the full screen state of the video\r\n    // If the browser is currently in fullscreen mode,\r\n    // then it should exit and vice versa.\r\n    toggleFullScreen : function () {\r\n      if (document.fullscreenElement) {\r\n        document.exitFullscreen();\r\n      } else if (document.webkitFullscreenElement) {\r\n        // Need this to support Safari\r\n        document.webkitExitFullscreen();\r\n      } else if (this._elm.webkitRequestFullscreen) {\r\n        // Need this to support Safari\r\n        this._elm.webkitRequestFullscreen();\r\n      } else {\r\n        this._elm.requestFullscreen();\r\n      }\r\n    },\r\n\r\n    // updateFullscreenButton changes the icon of the full screen button\r\n    // and tooltip to reflect the current full screen state of the video\r\n    updateFullscreenButton : function () {\r\n      fullscreenIcons.forEach((icon) => icon.classList.toggle('hidden'));\r\n\r\n      if (document.fullscreenElement) {\r\n        fullscreenButton.setAttribute('data-title', 'Exit full screen (f)');\r\n      } else {\r\n        fullscreenButton.setAttribute('data-title', 'Full screen (f)');\r\n      }\r\n    },\r\n\r\n    // togglePip toggles Picture-in-Picture mode on the video\r\n    togglePip : function () {\r\n      try {\r\n        if (this._video !== document.pictureInPictureElement) {\r\n          this._pipButton.disabled = true;\r\n          this._video.requestPictureInPicture();\r\n        } else {\r\n          document.exitPictureInPicture();\r\n        }\r\n      } catch (error) {\r\n        console.error(error);\r\n      } finally {\r\n        this._pipButton.disabled = false;\r\n      }\r\n    },\r\n\r\n    // hideControls hides the video controls when not in use\r\n    // if the video is paused, the controls must remain visible\r\n    hideControls : function () {\r\n      if (this._video.paused) {\r\n        return;\r\n      }\r\n\r\n      styler.addClass(this._video,'hide');\r\n    },\r\n\r\n    // showControls displays the video controls\r\n    showControls : function () {\r\n      styler.removeClass(this._video,'hide');\r\n    },\r\n\r\n    // keyboardShortcuts executes the relevant functions for\r\n    // each supported shortcut key\r\n    keyboardShortcuts : function (event) {\r\n      const { key } = event;\r\n      switch (key) {\r\n        case 'k':\r\n          this.togglePlay();\r\n          this.animatePlayback();\r\n          if (this._video.paused) {\r\n            this.showControls();\r\n          } else {\r\n            setTimeout(() => {\r\n              this.hideControls();\r\n            }, 2000);\r\n          }\r\n          break;\r\n        case 'm':\r\n          this.toggleMute();\r\n          break;\r\n        case 'f':\r\n          this.toggleFullScreen();\r\n          break;\r\n        case 'p':\r\n          this.togglePip();\r\n          break;\r\n      }\r\n    }    \r\n\r\n\r\n  });\r\n\r\n  plugins.register(CustomHtml5Video);\r\n\r\n  return CustomHtml5Video;\r\n});\r\n\r\n\ndefine('skylark-custom-h5video/main',[\r\n\t\"./player\"\r\n],function(Player){\r\n\treturn Player;\r\n});\ndefine('skylark-custom-h5video', ['skylark-custom-h5video/main'], function (main) { return main; });\n\n"]}