{"version":3,"sources":["player.js"],"names":["define","langx","styler","noder","eventer","$","plugins","CustomHtml5Video","Plugin","inherit","klassName","pluginName","options","selectors","video","videoControls","playButton","playbackIcons","timeElapsed","duration","progressBar","seek","seekTooltip","volumeButton","volumeIcons","volumeMute","volumeLow","volumeHigh","volume","playbackAnimation","fullscreenButton","fullscreenIcons","pipButton","_construct","elm","prototype","call","this","$el","_video","find","_videoControls","_playButton","_playbackIcons","_timeElapsed","_duration","_progressBar","_seek","_seekTooltip","_volumeButton","_volumeIcons","_volumeMute","_volumeLow","_volumeHigh","_volume","_playbackAnimation","_fullscreenButton","_fullscreenIcons","_pipButton","listenTo","togglePlay","updatePlayButton","initializeVideo","updateTimeElapsed","updateProgress","updateVolumeIcon","animatePlayback","showControls","hideControls","updateSeekTooltip","skipAhead","updateVolume","toggleMute","toggleFullScreen","updateFullscreenButton","togglePip","document","classList","add","keyboardShortcuts","createElement","canPlayType","controls","remove","load","source","media","_media","title","url","href","type","posterUrl","poster","altText","$play","_$play","$poster","_$poster","prop","src","alt","download","play","stop","pause","paused","ended","forEach","icon","toggle","setAttribute","formatTime","timeInSeconds","result","Date","toISOString","substr","minutes","seconds","videoDuration","Math","round","time","innerText","currentTime","value","floor","event","skipTo","offsetX","target","clientWidth","parseInt","getAttribute","t","textContent","rect","getBoundingClientRect","style","left","pageX","dataset","muted","animate","opacity","transform","fullscreenElement","exitFullscreen","webkitFullscreenElement","webkitExitFullscreen","_elm","webkitRequestFullscreen","requestFullscreen","pictureInPictureElement","disabled","requestPictureInPicture","exitPictureInPicture","error","console","addClass","removeClass","key","setTimeout","register"],"mappings":";;;;;;;AAAAA,QACE,gBACA,sBACA,qBACA,uBACA,qBACA,6BACA,SAASC,EAAMC,EAAOC,EAAOC,EAAQC,EAAIC,GAEzC,aAEA,IAAIC,EAAmBD,EAAQE,OAAOC,SACpCC,UAAY,mBAEZC,WAAa,0BAEbC,SACEC,WACEC,MAAQ,QACRC,cAAgB,kBAChBC,WAAa,QACbC,cAAgB,sBAChBC,YAAc,gBACdC,SAAW,YACXC,YAAc,gBACdC,KAAO,QACPC,YAAc,gBACdC,aAAe,iBACfC,YAAc,qBACdC,WAAa,2BACbC,UAAY,0BACZC,WAAa,2BACbC,OAAS,UACTC,kBAAoB,sBACpBC,iBAAmB,qBACnBC,gBAAkB,yBAClBC,UAAY,gBAMhBC,WAAY,SAASC,EAAKtB,GAExBN,EAAQE,OAAO2B,UAAUF,WAAWG,KAAKC,KAAKH,EAAItB,GAElD,IAAI0B,EAAMD,KAAKhC,IACXQ,EAAYwB,KAAKzB,QAAQC,UAE7BwB,KAAKE,OAASD,EAAIE,KAAK3B,EAAUC,OAAO,GACxCuB,KAAKI,eAAiBH,EAAIE,KAAK3B,EAAUE,eAAe,GACxDsB,KAAKK,YAAcJ,EAAIE,KAAK3B,EAAUG,YAAY,GAClDqB,KAAKM,eAAiBL,EAAIE,KAAK3B,EAAUI,eAAe,GACxDoB,KAAKO,aAAeN,EAAIE,KAAK3B,EAAUK,aAAa,GACpDmB,KAAKQ,UAAYP,EAAIE,KAAK3B,EAAUM,UAAU,GAC9CkB,KAAKS,aAAeR,EAAIE,KAAK3B,EAAUO,aAAa,GACpDiB,KAAKU,MAAQT,EAAIE,KAAK3B,EAAUQ,MAAM,GACtCgB,KAAKW,aAAeV,EAAIE,KAAK3B,EAAUS,aAAa,GACpDe,KAAKY,cAAgBX,EAAIE,KAAK3B,EAAUU,cAAc,GACtDc,KAAKa,aAAeZ,EAAIE,KAAK3B,EAAUW,aACvCa,KAAKc,YAAcb,EAAIE,KAAK3B,EAAUY,YAAY,GAClDY,KAAKe,WAAad,EAAIE,KAAK3B,EAAUa,WAAW,GAChDW,KAAKgB,YAAcf,EAAIE,KAAK3B,EAAUc,YAAY,GAClDU,KAAKiB,QAAUhB,EAAIE,KAAK3B,EAAUe,QAAQ,GAC1CS,KAAKkB,mBAAqBjB,EAAIE,KAAK3B,EAAUgB,mBAAmB,GAChEQ,KAAKmB,kBAAoBlB,EAAIE,KAAK3B,EAAUiB,kBAAkB,GAC9DO,KAAKoB,iBAAmBnB,EAAIE,KAAK3B,EAAUkB,iBAC3CM,KAAKqB,WAAapB,EAAIE,KAAK3B,EAAUmB,WAAW,GAGhDK,KAAKsB,SAAStD,EAAEgC,KAAKK,aAAa,QAASL,KAAKuB,YAChDvB,KAAKsB,SAAStD,EAAEgC,KAAKE,QAAQ,OAAOF,KAAKwB,kBACzCxB,KAAKsB,SAAStD,EAAEgC,KAAKE,QAAQ,QAAQF,KAAKwB,kBAC1CxB,KAAKsB,SAAStD,EAAEgC,KAAKE,QAAQ,iBAAiBF,KAAKyB,iBACnDzB,KAAKsB,SAAStD,EAAEgC,KAAKE,QAAQ,aAAaF,KAAK0B,mBAC/C1B,KAAKsB,SAAStD,EAAEgC,KAAKE,QAAQ,aAAaF,KAAK2B,gBAC/C3B,KAAKsB,SAAStD,EAAEgC,KAAKE,QAAQ,eAAeF,KAAK4B,kBACjD5B,KAAKsB,SAAStD,EAAEgC,KAAKE,QAAQ,QAAQF,KAAKuB,YAC1CvB,KAAKsB,SAAStD,EAAEgC,KAAKE,QAAQ,QAAQF,KAAK6B,iBAC1C7B,KAAKsB,SAAStD,EAAEgC,KAAKE,QAAQ,aAAaF,KAAK8B,cAC/C9B,KAAKsB,SAAStD,EAAEgC,KAAKE,QAAQ,aAAaF,KAAK+B,cAC/C/B,KAAKsB,SAAStD,EAAEgC,KAAKI,gBAAgB,aAAaJ,KAAK8B,cACvD9B,KAAKsB,SAAStD,EAAEgC,KAAKI,gBAAgB,aAAaJ,KAAK+B,cACvD/B,KAAKsB,SAAStD,EAAEgC,KAAKU,OAAO,YAAYV,KAAKgC,mBAC7ChC,KAAKsB,SAAStD,EAAEgC,KAAKU,OAAO,QAAQV,KAAKiC,WACzCjC,KAAKsB,SAAStD,EAAEgC,KAAKiB,SAAS,QAAQjB,KAAKkC,cAC3ClC,KAAKsB,SAAStD,EAAEgC,KAAKY,eAAe,QAAQZ,KAAKmC,YACjDnC,KAAKsB,SAAStD,EAAEgC,KAAKmB,mBAAmB,QAAQnB,KAAKoC,kBACrDpC,KAAKsB,SAASrB,EAAI,mBAAmBD,KAAKqC,wBAC1CrC,KAAKsB,SAAStD,EAAEgC,KAAKqB,YAAY,QAAQrB,KAAKsC,WAExC,4BAA6BC,UAC/BvC,KAAKqB,WAAWmB,UAAUC,IAAI,UAGlCzC,KAAKsB,SAAStD,EAAEuE,UAAU,QAAQvC,KAAK0C,qBAElBH,SAASI,cAAc,SAASC,cAEnD5C,KAAKE,OAAO2C,UAAW,EACvB7C,KAAKI,eAAeoC,UAAUM,OAAO,WAGvC9C,KAAK+C,QAIPC,OAAS,SAASC,GAChBjD,KAAKkD,OAASD,EACd,IAAIE,EAAQF,EAAME,OAAS,GACvBC,EAAMH,EAAMI,KACZC,EAAOL,EAAMK,KACbC,EAAYN,EAAMO,QAAU,GAC5BC,EAAUR,EAAMQ,SAAW,GAE3BxD,EAAMD,KAAKhC,IACXS,EAAQuB,KAAKE,OACbwD,EAAQ1D,KAAK2D,OACbC,EAAU5D,KAAK6D,SAEnB5D,EAAI6D,KAAK,QAASX,GAEd1E,EAAMmE,aACJQ,GAAOE,GAAQ7E,EAAMmE,YAAYU,KACnC7E,EAAMsF,IAAMX,GAIhB3E,EAAM+E,OAASD,EAEfK,EAAQE,MACNC,IAAQR,EACRS,IAAQP,IAGVC,EAAMI,MACJG,SAAcd,EACdE,KAASD,KAKbL,KAAO,WACL/C,KAAKE,OAAO6C,QAGdmB,KAAO,WACLlE,KAAKE,OAAOgE,QAIdC,KAAO,aAIPC,MAAQ,WACNpE,KAAKE,OAAOkE,SAMd7C,WAAa,WACPvB,KAAKE,OAAOmE,QAAUrE,KAAKE,OAAOoE,MACpCtE,KAAKE,OAAOgE,OAEZlE,KAAKE,OAAOkE,SAMhB5C,iBAAmB,WACjBxB,KAAKM,eAAeiE,QAASC,GAASA,EAAKhC,UAAUiC,OAAO,WAExDhG,MAAM4F,OACRrE,KAAKK,YAAYqE,aAAa,aAAc,YAE5C1E,KAAKK,YAAYqE,aAAa,aAAc,cAMhDC,WAAa,SAAUC,GACrB,MAAMC,EAAS,IAAIC,KAAqB,IAAhBF,GAAsBG,cAAcC,OAAO,GAAI,GAEvE,OACEC,QAASJ,EAAOG,OAAO,EAAG,GAC1BE,QAASL,EAAOG,OAAO,EAAG,KAM9BvD,gBAAkB,WAChB,MAAM0D,EAAgBC,KAAKC,MAAMrF,KAAKE,OAAOpB,UAC7CkB,KAAKU,MAAMgE,aAAa,MAAOS,GAC/BnF,KAAKS,aAAaiE,aAAa,MAAOS,GACtC,MAAMG,EAAOtF,KAAK2E,WAAWQ,GAC7BnF,KAAKQ,UAAU+E,aAAeD,EAAKL,WAAWK,EAAKJ,UACnDlF,KAAKQ,UAAUkE,aAAa,cAAeY,EAAKL,YAAYK,EAAKJ,aAKnExD,kBAAoB,WAClB,MAAM4D,EAAOtF,KAAK2E,WAAWS,KAAKC,MAAMrF,KAAKE,OAAOsF,cACpDxF,KAAKO,aAAagF,aAAeD,EAAKL,WAAWK,EAAKJ,UACtDlF,KAAKO,aAAamE,aAAa,cAAeY,EAAKL,YAAYK,EAAKJ,aAKtEvD,eAAiB,WACf3B,KAAKU,MAAM+E,MAAQL,KAAKM,MAAM1F,KAAKE,OAAOsF,aAC1CxF,KAAKS,aAAagF,MAAQL,KAAKM,MAAM1F,KAAKE,OAAOsF,cAMnDxD,kBAAoB,SAAU2D,GAC5B,MAAMC,EAASR,KAAKC,MACjBM,EAAME,QAAUF,EAAMG,OAAOC,YAC5BC,SAASL,EAAMG,OAAOG,aAAa,OAAQ,KAE/CjG,KAAKU,MAAMgE,aAAa,YAAakB,GACrC,MAAMM,EAAIlG,KAAK2E,WAAWiB,GAC1B5F,KAAKW,aAAawF,eAAiBD,EAAEjB,WAAWiB,EAAEhB,UAClD,MAAMkB,EAAOpG,KAAKE,OAAOmG,wBACzBrG,KAAKW,aAAa2F,MAAMC,QAAUZ,EAAMa,MAAQJ,EAAKG,UAKvDtE,UAAY,SAAU0D,GACpB,MAAMC,EAASD,EAAMG,OAAOW,QAAQzH,KAChC2G,EAAMG,OAAOW,QAAQzH,KACrB2G,EAAMG,OAAOL,MACjBzF,KAAKE,OAAOsF,YAAcI,EAC1B5F,KAAKS,aAAagF,MAAQG,EAC1B5F,KAAKU,MAAM+E,MAAQG,GAKrB1D,aAAe,WACTlC,KAAKE,OAAOwG,QACd1G,KAAKE,OAAOwG,OAAQ,GAGtB1G,KAAKE,OAAOX,OAASS,KAAKiB,QAAQwE,OAKpC7D,iBAAmB,WACjB5B,KAAKa,aAAa0D,QAASC,IACzBA,EAAKhC,UAAUC,IAAI,YAGrBzC,KAAKY,cAAc8D,aAAa,aAAc,YAE1C1E,KAAKE,OAAOwG,OAAgC,IAAvB1G,KAAKE,OAAOX,QACnCS,KAAKc,YAAY0B,UAAUM,OAAO,UAClC9C,KAAKY,cAAc8D,aAAa,aAAc,eACrC1E,KAAKE,OAAOX,OAAS,GAAKS,KAAKE,OAAOX,QAAU,GACzDS,KAAKe,WAAWyB,UAAUM,OAAO,UAEjC9C,KAAKgB,YAAYwB,UAAUM,OAAO,WAOtCX,WAAa,WACXnC,KAAKE,OAAOwG,OAASjI,MAAMiI,MAEvB1G,KAAKE,OAAOwG,OACd1G,KAAKiB,QAAQyD,aAAa,cAAe1E,KAAKiB,QAAQwE,OACtDzF,KAAKiB,QAAQwE,MAAQ,GAErBzF,KAAKiB,QAAQwE,MAAQzF,KAAKiB,QAAQwF,QAAQlH,QAM9CsC,gBAAkB,WAChB7B,KAAKkB,mBAAmByF,UAGlBC,QAAS,EACTC,UAAW,aAGXD,QAAS,EACTC,UAAW,gBAIb/H,SAAU,OAQhBsD,iBAAmB,WACbG,SAASuE,kBACXvE,SAASwE,iBACAxE,SAASyE,wBAElBzE,SAAS0E,uBACAjH,KAAKkH,KAAKC,wBAEnBnH,KAAKkH,KAAKC,0BAEVnH,KAAKkH,KAAKE,qBAMd/E,uBAAyB,WACvB3C,gBAAgB6E,QAASC,GAASA,EAAKhC,UAAUiC,OAAO,WAEpDlC,SAASuE,kBACXrH,iBAAiBiF,aAAa,aAAc,wBAE5CjF,iBAAiBiF,aAAa,aAAc,oBAKhDpC,UAAY,WACV,IACMtC,KAAKE,SAAWqC,SAAS8E,yBAC3BrH,KAAKqB,WAAWiG,UAAW,EAC3BtH,KAAKE,OAAOqH,2BAEZhF,SAASiF,uBAEX,MAAOC,GACPC,QAAQD,MAAMA,GACd,QACAzH,KAAKqB,WAAWiG,UAAW,IAM/BvF,aAAe,WACT/B,KAAKE,OAAOmE,QAIhBxG,EAAO8J,SAAS3H,KAAKE,OAAO,SAI9B4B,aAAe,WACbjE,EAAO+J,YAAY5H,KAAKE,OAAO,SAKjCwC,kBAAoB,SAAUiD,GAC5B,MAAMkC,IAAEA,GAAQlC,EAChB,OAAQkC,GACN,IAAK,IACH7H,KAAKuB,aACLvB,KAAK6B,kBACD7B,KAAKE,OAAOmE,OACdrE,KAAK8B,eAELgG,WAAW,KACT9H,KAAK+B,gBACJ,KAEL,MACF,IAAK,IACH/B,KAAKmC,aACL,MACF,IAAK,IACHnC,KAAKoC,mBACL,MACF,IAAK,IACHpC,KAAKsC,gBAUb,OAFArE,EAAQ8J,SAAS7J,GAEVA","file":"../player.js","sourcesContent":["define([\r\n  \"skylark-langx\",\r\n  \"skylark-domx-styler\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-plugins-base\"\r\n],function(langx,styler,noder, eventer,$ , plugins) {\r\n\r\n  'use strict'\r\n\r\n  var CustomHtml5Video = plugins.Plugin.inherit({\r\n    klassName : \"CustomHtml5Video\",\r\n\r\n    pluginName : \"intg.custom_html5_video\",\r\n   \r\n    options : {\r\n      selectors : {\r\n        video : 'video',\r\n        videoControls : '.video-controls',\r\n        playButton : '.play',\r\n        playbackIcons : '.playback-icons use',\r\n        timeElapsed : '.time-elapsed',\r\n        duration : '.duration',\r\n        progressBar : '.progress-bar',\r\n        seek : '.seek',\r\n        seekTooltip : '.seek-tooltip',\r\n        volumeButton : '.volume-button',\r\n        volumeIcons : '.volume-button use',\r\n        volumeMute : 'use[href=\"#volume-mute\"]',\r\n        volumeLow : 'use[href=\"#volume-low\"]',\r\n        volumeHigh : 'use[href=\"#volume-high\"]',\r\n        volume : '.volume',\r\n        playbackAnimation : '.playback-animation',\r\n        fullscreenButton : '.fullscreen-button',\r\n        fullscreenIcons : '.fullscreen-button use',\r\n        pipButton : '.pip-button'\r\n\r\n      }\r\n    },\r\n\r\n\r\n    _construct: function(elm, options) {\r\n      //this.options = options\r\n      plugins.Plugin.prototype._construct.call(this,elm,options);\r\n\r\n      let $el = this.$(),\r\n          selectors = this.options.selectors;\r\n\r\n      this._video = $el.find(selectors.video)[0];\r\n      this._videoControls = $el.find(selectors.videoControls)[0];\r\n      this._playButton = $el.find(selectors.playButton)[0];\r\n      this._playbackIcons = $el.find(selectors.playbackIcons)[0];\r\n      this._timeElapsed = $el.find(selectors.timeElapsed)[0];\r\n      this._duration = $el.find(selectors.duration)[0];\r\n      this._progressBar = $el.find(selectors.progressBar)[0];\r\n      this._seek = $el.find(selectors.seek)[0];\r\n      this._seekTooltip = $el.find(selectors.seekTooltip)[0];\r\n      this._volumeButton = $el.find(selectors.volumeButton)[0];\r\n      this._volumeIcons = $el.find(selectors.volumeIcons);\r\n      this._volumeMute = $el.find(selectors.volumeMute)[0];\r\n      this._volumeLow = $el.find(selectors.volumeLow)[0];\r\n      this._volumeHigh = $el.find(selectors.volumeHigh)[0];\r\n      this._volume = $el.find(selectors.volume)[0];\r\n      this._playbackAnimation = $el.find(selectors.playbackAnimation)[0];\r\n      this._fullscreenButton = $el.find(selectors.fullscreenButton)[0];\r\n      this._fullscreenIcons = $el.find(selectors.fullscreenIcons);\r\n      this._pipButton = $el.find(selectors.pipButton)[0];\r\n\r\n      // Add eventlisteners here\r\n      this.listenTo($(this._playButton),'click', this.togglePlay);\r\n      this.listenTo($(this._video),'play',this.updatePlayButton);\r\n      this.listenTo($(this._video),'pause',this.updatePlayButton);\r\n      this.listenTo($(this._video),'loadedmetadata',this.initializeVideo);\r\n      this.listenTo($(this._video),'timeupdate',this.updateTimeElapsed);\r\n      this.listenTo($(this._video),'timeupdate',this.updateProgress);\r\n      this.listenTo($(this._video),'volumechange',this.updateVolumeIcon);\r\n      this.listenTo($(this._video),'click',this.togglePlay);\r\n      this.listenTo($(this._video),'click',this.animatePlayback);\r\n      this.listenTo($(this._video),'mouseenter',this.showControls);\r\n      this.listenTo($(this._video),'mouseleave',this.hideControls);\r\n      this.listenTo($(this._videoControls),'mouseenter',this.showControls);\r\n      this.listenTo($(this._videoControls),'mouseleave',this.hideControls);\r\n      this.listenTo($(this._seek),'mousemove',this.updateSeekTooltip);\r\n      this.listenTo($(this._seek),'input',this.skipAhead);\r\n      this.listenTo($(this._volume),'input',this.updateVolume);\r\n      this.listenTo($(this._volumeButton),'click',this.toggleMute);\r\n      this.listenTo($(this._fullscreenButton),'click',this.toggleFullScreen);\r\n      this.listenTo($el,'fullscreenchange',this.updateFullscreenButton);\r\n      this.listenTo($(this._pipButton),'click',this.togglePip);\r\n\r\n      if (!('pictureInPictureEnabled' in document)) {\r\n          this._pipButton.classList.add('hidden');\r\n      }\r\n\r\n      this.listenTo($(document),'keyup',this.keyboardShortcuts);\r\n      \r\n      const videoWorks = !!document.createElement('video').canPlayType;\r\n      if (videoWorks) {\r\n        this._video.controls = false;\r\n        this._videoControls.classList.remove('hidden');\r\n      }\r\n\r\n      this.load();\r\n    },\r\n\r\n\r\n    source : function(media) {\r\n      this._media = media;\r\n      let title = media.title || \"\",\r\n          url = media.href,\r\n          type = media.type,\r\n          posterUrl = media.poster || \"\",\r\n          altText = media.altText || \"\";\r\n\r\n      let $el = this.$(),\r\n          video = this._video,\r\n          $play = this._$play,\r\n          $poster = this._$poster;\r\n\r\n      $el.prop(\"title\", title);\r\n      \r\n      if (video.canPlayType) {\r\n        if (url && type && video.canPlayType(type)) {\r\n          video.src = url\r\n        }    \r\n      }\r\n\r\n      video.poster = posterUrl\r\n      \r\n      $poster.prop({\r\n        \"src\" : posterUrl,\r\n        \"alt\" : altText\r\n      });\r\n\r\n      $play.prop({\r\n        'download' :  title,\r\n        \"href\" : url\r\n      });\r\n    \r\n    },\r\n\r\n    load : function() {\r\n      this._video.load();\r\n    },\r\n\r\n    play : function() {\r\n      this._video.play();\r\n\r\n    },\r\n\r\n    stop : function() {\r\n\r\n    },\r\n\r\n    pause : function() {\r\n      this._video.pause();      \r\n    },\r\n\r\n    // togglePlay toggles the playback state of the video.\r\n    // If the video playback is paused or ended, the video is played\r\n    // otherwise, the video is paused\r\n    togglePlay : function () {\r\n      if (this._video.paused || this._video.ended) {\r\n        this._video.play();\r\n      } else {\r\n        this._video.pause();\r\n      }\r\n    },\r\n\r\n    // updatePlayButton updates the playback icon and tooltip\r\n    // depending on the playback state\r\n    updatePlayButton : function () {\r\n      this._playbackIcons.forEach((icon) => icon.classList.toggle('hidden'));\r\n\r\n      if (video.paused) {\r\n        this._playButton.setAttribute('data-title', 'Play (k)');\r\n      } else {\r\n        this._playButton.setAttribute('data-title', 'Pause (k)');\r\n      }\r\n    },\r\n\r\n    // formatTime takes a time length in seconds and returns the time in\r\n    // minutes and seconds\r\n    formatTime : function (timeInSeconds) {\r\n      const result = new Date(timeInSeconds * 1000).toISOString().substr(11, 8);\r\n\r\n      return {\r\n        minutes: result.substr(3, 2),\r\n        seconds: result.substr(6, 2),\r\n      };\r\n    },\r\n\r\n    // initializeVideo sets the video duration, and maximum value of the\r\n    // progressBar\r\n    initializeVideo : function () {\r\n      const videoDuration = Math.round(this._video.duration);\r\n      this._seek.setAttribute('max', videoDuration);\r\n      this._progressBar.setAttribute('max', videoDuration);\r\n      const time = this.formatTime(videoDuration);\r\n      this._duration.innerText = `${time.minutes}:${time.seconds}`;\r\n      this._duration.setAttribute('datetime', `${time.minutes}m ${time.seconds}s`);\r\n    },\r\n\r\n    // updateTimeElapsed indicates how far through the video\r\n    // the current playback is by updating the timeElapsed element\r\n    updateTimeElapsed : function () {\r\n      const time = this.formatTime(Math.round(this._video.currentTime));\r\n      this._timeElapsed.innerText = `${time.minutes}:${time.seconds}`;\r\n      this._timeElapsed.setAttribute('datetime', `${time.minutes}m ${time.seconds}s`);\r\n    },\r\n\r\n    // updateProgress indicates how far through the video\r\n    // the current playback is by updating the progress bar\r\n    updateProgress : function () {\r\n      this._seek.value = Math.floor(this._video.currentTime);\r\n      this._progressBar.value = Math.floor(this._video.currentTime);\r\n    },\r\n\r\n    // updateSeekTooltip uses the position of the mouse on the progress bar to\r\n    // roughly work out what point in the video the user will skip to if\r\n    // the progress bar is clicked at that point\r\n    updateSeekTooltip : function (event) {\r\n      const skipTo = Math.round(\r\n        (event.offsetX / event.target.clientWidth) *\r\n          parseInt(event.target.getAttribute('max'), 10)\r\n      );\r\n      this._seek.setAttribute('data-seek', skipTo);\r\n      const t = this.formatTime(skipTo);\r\n      this._seekTooltip.textContent = `${t.minutes}:${t.seconds}`;\r\n      const rect = this._video.getBoundingClientRect();\r\n      this._seekTooltip.style.left = `${event.pageX - rect.left}px`;\r\n    },\r\n\r\n    // skipAhead jumps to a different point in the video when the progress bar\r\n    // is clicked\r\n    skipAhead : function (event) {\r\n      const skipTo = event.target.dataset.seek\r\n        ? event.target.dataset.seek\r\n        : event.target.value;\r\n      this._video.currentTime = skipTo;\r\n      this._progressBar.value = skipTo;\r\n      this._seek.value = skipTo;\r\n    },\r\n\r\n    // updateVolume updates the video's volume\r\n    // and disables the muted state if active\r\n    updateVolume : function () {\r\n      if (this._video.muted) {\r\n        this._video.muted = false;\r\n      }\r\n\r\n      this._video.volume = this._volume.value;\r\n    },\r\n\r\n    // updateVolumeIcon updates the volume icon so that it correctly reflects\r\n    // the volume of the video\r\n    updateVolumeIcon : function () {\r\n      this._volumeIcons.forEach((icon) => {\r\n        icon.classList.add('hidden');\r\n      });\r\n\r\n      this._volumeButton.setAttribute('data-title', 'Mute (m)');\r\n\r\n      if (this._video.muted || this._video.volume === 0) {\r\n        this._volumeMute.classList.remove('hidden');\r\n        this._volumeButton.setAttribute('data-title', 'Unmute (m)');\r\n      } else if (this._video.volume > 0 && this._video.volume <= 0.5) {\r\n        this._volumeLow.classList.remove('hidden');\r\n      } else {\r\n        this._volumeHigh.classList.remove('hidden');\r\n      }\r\n    },\r\n\r\n    // toggleMute mutes or unmutes the video when executed\r\n    // When the video is unmuted, the volume is returned to the value\r\n    // it was set to before the video was muted\r\n    toggleMute : function () {\r\n      this._video.muted = !video.muted;\r\n\r\n      if (this._video.muted) {\r\n        this._volume.setAttribute('data-volume', this._volume.value);\r\n        this._volume.value = 0;\r\n      } else {\r\n        this._volume.value = this._volume.dataset.volume;\r\n      }\r\n    },\r\n\r\n    // animatePlayback displays an animation when\r\n    // the video is played or paused\r\n    animatePlayback : function () {\r\n      this._playbackAnimation.animate(\r\n        [\r\n          {\r\n            opacity: 1,\r\n            transform: 'scale(1)',\r\n          },\r\n          {\r\n            opacity: 0,\r\n            transform: 'scale(1.3)',\r\n          },\r\n        ],\r\n        {\r\n          duration: 500,\r\n        }\r\n      );\r\n    },\r\n\r\n    // toggleFullScreen toggles the full screen state of the video\r\n    // If the browser is currently in fullscreen mode,\r\n    // then it should exit and vice versa.\r\n    toggleFullScreen : function () {\r\n      if (document.fullscreenElement) {\r\n        document.exitFullscreen();\r\n      } else if (document.webkitFullscreenElement) {\r\n        // Need this to support Safari\r\n        document.webkitExitFullscreen();\r\n      } else if (this._elm.webkitRequestFullscreen) {\r\n        // Need this to support Safari\r\n        this._elm.webkitRequestFullscreen();\r\n      } else {\r\n        this._elm.requestFullscreen();\r\n      }\r\n    },\r\n\r\n    // updateFullscreenButton changes the icon of the full screen button\r\n    // and tooltip to reflect the current full screen state of the video\r\n    updateFullscreenButton : function () {\r\n      fullscreenIcons.forEach((icon) => icon.classList.toggle('hidden'));\r\n\r\n      if (document.fullscreenElement) {\r\n        fullscreenButton.setAttribute('data-title', 'Exit full screen (f)');\r\n      } else {\r\n        fullscreenButton.setAttribute('data-title', 'Full screen (f)');\r\n      }\r\n    },\r\n\r\n    // togglePip toggles Picture-in-Picture mode on the video\r\n    togglePip : function () {\r\n      try {\r\n        if (this._video !== document.pictureInPictureElement) {\r\n          this._pipButton.disabled = true;\r\n          this._video.requestPictureInPicture();\r\n        } else {\r\n          document.exitPictureInPicture();\r\n        }\r\n      } catch (error) {\r\n        console.error(error);\r\n      } finally {\r\n        this._pipButton.disabled = false;\r\n      }\r\n    },\r\n\r\n    // hideControls hides the video controls when not in use\r\n    // if the video is paused, the controls must remain visible\r\n    hideControls : function () {\r\n      if (this._video.paused) {\r\n        return;\r\n      }\r\n\r\n      styler.addClass(this._video,'hide');\r\n    },\r\n\r\n    // showControls displays the video controls\r\n    showControls : function () {\r\n      styler.removeClass(this._video,'hide');\r\n    },\r\n\r\n    // keyboardShortcuts executes the relevant functions for\r\n    // each supported shortcut key\r\n    keyboardShortcuts : function (event) {\r\n      const { key } = event;\r\n      switch (key) {\r\n        case 'k':\r\n          this.togglePlay();\r\n          this.animatePlayback();\r\n          if (this._video.paused) {\r\n            this.showControls();\r\n          } else {\r\n            setTimeout(() => {\r\n              this.hideControls();\r\n            }, 2000);\r\n          }\r\n          break;\r\n        case 'm':\r\n          this.toggleMute();\r\n          break;\r\n        case 'f':\r\n          this.toggleFullScreen();\r\n          break;\r\n        case 'p':\r\n          this.togglePip();\r\n          break;\r\n      }\r\n    }    \r\n\r\n\r\n  });\r\n\r\n  plugins.register(CustomHtml5Video);\r\n\r\n  return CustomHtml5Video;\r\n});\r\n\r\n"]}